{"version":3,"sources":["components/Image.js","components/ImageGallery.js","App.js","serviceWorker.js","index.js"],"names":["Image","_this$props","this","props","image","handleChangePicture","coordinates","react_default","a","createElement","className","src","alt","type","id","join","accept","onChange","e","htmlFor","Component","ImageGallery","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","_ref","target","fileReader","FileReader","readAsDataURL","files","onload","setState","state","_","data","result","isImage","resource","RegExp","concat","config","extensions","test","startsWith","renderImages","res","index","toConsumableArray","map","objkey","components_Image","key","role","App","components_ImageGallery","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"m7xzDAwBeA,mLArBF,IAAAC,EAC+CC,KAAKC,MAAjDC,EADHH,EACGG,MAAOC,EADVJ,EACUI,oBAAqBC,EAD/BL,EAC+BK,YAEpC,OAAQC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8CACnBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAKP,EAAOQ,IAAKR,EAAOM,UAAU,kBACvCH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,SACII,KAAK,OACLC,GAAIR,EAAYS,OAChBC,OAAO,UACPN,UAAU,oBACVO,SAAU,SAAAC,GAAC,OAAIb,EAAoBa,EAAGZ,MAC1CC,EAAAC,EAAAC,cAAA,SAAOC,UAAU,oBAAoBS,QAASb,EAAYS,mBAd1DK,aCmELC,cA5DX,SAAAA,EAAYlB,GAAO,IAAAmB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAArB,KAAAmB,IACfC,EAAAC,OAAAE,EAAA,EAAAF,CAAArB,KAAAqB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAzB,KAAMC,KAUVE,oBAAsB,SAAAuB,EAAatB,GAAgB,IAA1BuB,EAA0BD,EAA1BC,OACfC,EAAa,IAAIC,WACvBD,EAAWE,cAAcH,EAAOI,MAAM,IACtCH,EAAWI,OAAS,SAAChB,GACjBI,EAAKa,SAAS,SAAAC,GAAK,OAAKC,MAAMD,EAAME,KAAMhC,EAAaY,EAAEW,OAAOU,QAASH,MAf9Dd,EAmBnBkB,QAAU,SAACC,GACP,OAAQ,IAAIC,OAAJ,KAAAC,OAAgBC,EAAOC,WAAW9B,KAAK,KAAvC,OAAkD+B,KAAKL,IAAaA,EAASM,WAAW,eApBjFzB,EAgCnB0B,aAAe,SAACP,EAAUnC,GACtB,OAAI+B,UAAUI,GACHJ,MAAMI,EAAU,SAACQ,EAAKC,GAAN,OAAgB5B,EAAK0B,aAAaC,EAAlB,GAAAN,OAAApB,OAAA4B,EAAA,EAAA5B,CAA2BjB,GAA3B,CAAwC4C,OAE/Eb,WAAWI,GACJJ,OAAOI,GAAUW,IAAI,SAACC,GAAD,OAAY/B,EAAK0B,aAAaP,EAASY,GAA3B,GAAAV,OAAApB,OAAA4B,EAAA,EAAA5B,CAAwCjB,GAAxC,CAAqD+C,OAE7FhB,WAAWI,IAAcnB,EAAKkB,QAAQC,GAC/BlC,EAAAC,EAAAC,cAAC6C,EAAD,CACHC,IAAKjD,EAAYS,OACjBX,MAAOqC,EACPpC,oBAAqBiB,EAAKjB,oBAC1BC,YAAaA,SALrB,GArCAgB,EAAKc,MAAQ,CAAEE,QAFAhB,wEAiDf,OAAOf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACjBR,KAAKkC,MAAME,KAAOpC,KAAK8C,aAAa9C,KAAKkC,MAAME,KAAM,IAClD/B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAiB8C,KAAK,UACjCjD,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WAAhB,wBAtDGU,aCKZqC,mLAPP,OAAOlD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAClBH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iBAAd,iBACAH,EAAAC,EAAAC,cAACiD,EAAD,cAJMtC,aCQEuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAO1D,EAAAC,EAAAC,cAACyD,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d324814e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Image extends Component {\r\n    render() {\r\n        const { image, handleChangePicture, coordinates } = this.props;\r\n\r\n        return (<div className=\"border col-lg-4 col-md-6 col-sm-6 col-xs-6\">\r\n            <div className=\"container image-container\">\r\n                <img src={image} alt={image} className=\"img-thumbnail\" />\r\n                <div className=\"custom-file\">\r\n                    <input \r\n                        type=\"file\" \r\n                        id={coordinates.join()} \r\n                        accept=\"image/*\" \r\n                        className=\"custom-file-input\"\r\n                        onChange={e => handleChangePicture(e, coordinates)} />\r\n                    <label className=\"custom-file-label\" htmlFor={coordinates.join()} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default Image;\r\n","import React, { Component } from 'react';\r\nimport * as _ from 'lodash';\r\n\r\nimport config from '../config';\r\nimport data from '../assets/data';\r\nimport Image from './Image';\r\n\r\n\r\nclass ImageGallery extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { data }\r\n    }\r\n\r\n    /**\r\n     * Sets the selected image in the data object, uses the coordinates to find the image path.\r\n     *  \r\n     * @param event The event.\r\n     * @param coordinates The image's path in the data object.\r\n     */\r\n    handleChangePicture = ({ target }, coordinates) => {\r\n        const fileReader = new FileReader();\r\n        fileReader.readAsDataURL(target.files[0]);\r\n        fileReader.onload = (e) => {\r\n            this.setState(state => (_.set(state.data, coordinates, e.target.result), state));\r\n        };\r\n    };\r\n\r\n    isImage = (resource) => {\r\n        return (new RegExp(`.(${config.extensions.join('|')})$`)).test(resource) || resource.startsWith('data:image');\r\n    };\r\n\r\n    /**\r\n     * A Recoursive function that goes over all the elements in the resource \r\n     * and for each element that represents an image - \r\n     * returns an Image Component with the path of the element in the data object (coordinates).\r\n     * \r\n     * @param resource The resource to generate images from.\r\n     * @param coordinates The resource's path in the data object.\r\n     * @return Returns array of Image components.\r\n     */\r\n    renderImages = (resource, coordinates) => {\r\n        if (_.isArray(resource)) {\r\n            return _.map(resource, (res, index) => this.renderImages(res, [...coordinates, index]));\r\n        }\r\n        if (_.isObject(resource)) {\r\n            return _.keys(resource).map((objkey) => this.renderImages(resource[objkey], [...coordinates, objkey]));\r\n        }\r\n        if (_.isString(resource) && (this.isImage(resource))) {\r\n            return <Image\r\n                key={coordinates.join()}\r\n                image={resource}\r\n                handleChangePicture={this.handleChangePicture}\r\n                coordinates={coordinates} />;\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return <div className=\"row\">\r\n            {this.state.data ? this.renderImages(this.state.data, []) :\r\n                <div className=\"spiner-wrapper\">\r\n                    <div className=\"spinner-border\" role=\"status\">\r\n                        <span className=\"sr-only\">Loading...</span>\r\n                    </div>\r\n                </div>}\r\n        </div>;\r\n    };\r\n}\r\n\r\nexport default ImageGallery;\r\n","import React, { Component } from 'react';\n\nimport ImageGallery from './components/ImageGallery';\n\nclass App extends Component {\n    render() {\n        return <div className=\"container\">\n            <h2 className=\"row pb-5 pt-5\">Image Gallery</h2>           \n            <ImageGallery />\n        </div>;\n    };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}